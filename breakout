#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5\allegro_audio.h>
#include <allegro5\allegro_acodec.h>
#include<allegro5\allegro_ttf.h>
#include<allegro5\allegro_font.h>
#include<allegro5\allegro_primitives.h>
#include<iostream>
#include<string>
using namespace std;
int rscore = 0;

bool collision(int b1_x, int b1_y, int b2_x, int b2_y);

class Brick {
private:
	int width, height;
	int xPos,yPos;
	bool dead;
public:
	void set_value(int x, int y, int w, int h);
	void drawBrick();
	void killBrick();
	bool isDead(); //returns the value of dead
	bool Collision(int ball_x, int ball_y);
	




};
	
	
	
	int main()
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_TIMER *timer = NULL;
	ALLEGRO_BITMAP * rpaddle = NULL;
	ALLEGRO_BITMAP *ball = NULL;
	ALLEGRO_FONT*font = NULL;
	ALLEGRO_SAMPLE *sample3 = NULL;
	ALLEGRO_SAMPLE *sample2 = NULL;
	ALLEGRO_SAMPLE_INSTANCE *instance3 = NULL;
	ALLEGRO_SAMPLE_INSTANCE *instance2 = NULL;
	float rpaddle_x = 300;
	float rpaddle_y = 400;
	float ball_x = 150;
	float ball_y = 150;
	bool keyr[2] = { false, false };//rpaddle

	float ball_dx = -4.0, ball_dy = 6.0;
	al_install_audio();
	al_init_acodec_addon();
	al_reserve_samples(10);

	sample3 = al_load_sample("pong_music.wav");

	instance3 = al_create_sample_instance(sample3);

	al_set_sample_instance_playmode(instance3, ALLEGRO_PLAYMODE_LOOP);

	al_attach_sample_instance_to_mixer(instance3, al_get_default_mixer());

	al_play_sample_instance(instance3);

	//don't redraw until an event happens
	bool redraw = true;

	//this controls our game loop
	bool doexit = false;

	al_init();
	al_init_primitives_addon();
	al_init_font_addon(); // initialize the font addon
	al_init_ttf_addon();// initialize the ttf (True Type Font) addon

						//get the keyboard ready to use
	al_install_keyboard();

	sample2 = al_load_sample("Jump.wav");

	instance2 = al_create_sample_instance(sample2);

	al_set_sample_instance_playmode(instance2, ALLEGRO_PLAYMODE_ONCE);

	al_attach_sample_instance_to_mixer(instance2, al_get_default_mixer());

	timer = al_create_timer(.02);

	display = al_create_display(640, 480);
	rpaddle = al_create_bitmap(200, 25);
	font = al_create_builtin_font();
	ball = al_create_bitmap(32, 32);

	al_set_target_bitmap(rpaddle);
	al_clear_to_color(al_map_rgb(255, 255, 255));

	al_set_target_bitmap(ball);
	al_clear_to_color(al_map_rgb(255, 255, 255));

	al_set_target_bitmap(al_get_backbuffer(display));

	event_queue = al_create_event_queue();

	al_register_event_source(event_queue, al_get_display_event_source(display));

	al_register_event_source(event_queue, al_get_timer_event_source(timer));

	//new! tell the event queue that it should take keyboard events, too 
	al_register_event_source(event_queue, al_get_keyboard_event_source());

	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();

	al_start_timer(timer);
	
	Brick Brick1;
	Brick1.set_value(1, 1, 80, 10);
	Brick Brick2;
	Brick2.set_value(82, 1, 80, 10);
	Brick Brick3;
	Brick3.set_value(165, 1, 80, 10);
	Brick Brick4;
	Brick4.set_value(250, 1, 80, 10);
	Brick Brick5;
	Brick5.set_value(335, 1, 80, 10);
	Brick Brick6;
	Brick6.set_value(420, 1, 80, 10);
	Brick Brick7;
	Brick7.set_value(505, 1, 80, 10);
	Brick Brick8;
	Brick8.set_value(590, 1, 80, 10);
	Brick Brick9;
	Brick9.set_value(1, 15, 80, 10);
	Brick Brick10;
	Brick10.set_value(82, 15, 100, 10);
	Brick Brick11;
	Brick11.set_value(184, 15, 50, 10);
	Brick Brick12;
	Brick12.set_value(236, 15, 200, 10);
	Brick Brick13;
	Brick13.set_value(438, 15, 50, 10);
	Brick Brick14;
	Brick14.set_value(460, 15, 50, 10);
	Brick Brick15;
	Brick15.set_value(515, 15, 50, 10);
	Brick Brick16;
	Brick16.set_value(570, 15, 75, 10);
	Brick Brick17;
	Brick17.set_value(1, 30, 250, 15);
	Brick Brick18;
	Brick18.set_value(255, 30, 50, 15);
	Brick Brick19;
	Brick19.set_value(310, 30, 75, 15);
	Brick Brick20;
	Brick20.set_value(390, 30, 75, 15);
	Brick Brick21;
	Brick21.set_value(470, 30, 75, 15);
	Brick Brick22;
	Brick22.set_value(545, 30, 100, 15);
	Brick Brick23;
	Brick23.set_value(1, 50, 75, 20);
	Brick Brick24;
	Brick24.set_value(55, 50, 75, 20);
	Brick Brick25;
	Brick25.set_value(135, 50, 75, 20);
	Brick Brick26;
	Brick26.set_value(215, 50, 75, 20);
	Brick Brick27;
	Brick27.set_value(295, 50, 75, 20);
	Brick Brick28;
	Brick28.set_value(375, 50, 75, 20);
	Brick Brick29;
	Brick29.set_value(455, 50, 75, 20);
	Brick Brick30;
	Brick30.set_value(535, 50, 105, 20);
	Brick Brick31;
	Brick31.set_value(1, 75, 90, 25);
	Brick Brick32;
	Brick32.set_value(95, 75, 90, 25);
	Brick Brick33;
	Brick33.set_value(190, 75, 90, 25);
	Brick Brick34;
	Brick34.set_value(285, 75, 90, 25);
	Brick Brick35;
	Brick35.set_value(380, 75, 90, 25);
	Brick Brick36;
	Brick36.set_value(475, 75, 90, 25);
	Brick Brick37;
	Brick37.set_value(570, 75, 90, 25);
	Brick Brick38;
	Brick38.set_value(1, 105, 90, 25);
	Brick Brick39;
	Brick39.set_value(100, 105, 350, 25);
	Brick Brick40;
	Brick40.set_value(455, 105, 255, 25);
		//so the game loop is set to act on "ticks" of the timer OR keyboard presses 
	//OR the mouse closing the display
	while (!doexit)
	{
		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);
		//if all the bricks are dead, show message, pause, quit game.
		if (Brick1.isDead() && Brick2.isDead() && Brick3.isDead() && Brick4.isDead() && Brick5.isDead() && Brick6.isDead() && Brick7.isDead() && Brick8.isDead() && Brick9.isDead() && Brick10.isDead() && Brick11.isDead() && Brick12.isDead() && Brick13.isDead() && Brick14.isDead() && Brick15.isDead() && Brick16.isDead() && Brick17.isDead() && Brick18.isDead() && Brick19.isDead() && Brick20.isDead() && Brick21.isDead() && Brick22.isDead() && Brick23.isDead() && Brick24.isDead() && Brick25.isDead() && Brick26.isDead() && Brick27.isDead() && Brick28.isDead() && Brick29.isDead() && Brick30.isDead() && Brick31.isDead() && Brick32.isDead() && Brick33.isDead() && Brick34.isDead() && Brick35.isDead() && Brick36.isDead() && Brick37.isDead() && Brick38.isDead() && Brick39.isDead() && Brick40.isDead()) {
			al_rest(1);
			al_clear_to_color(al_map_rgb(0, 0, 0));
			al_flip_display();
			al_draw_text(font, al_map_rgb(0, 0, 50), 320, 240, ALLEGRO_ALIGN_CENTER, "YOU WON AT BREAKOUT!!");
			al_flip_display();
			al_rest(3);
			doexit = true;
		}
			//////////////////////////////////////////////////////////////////////////////////////////////////
		//here's the movement algorithm

		if (ev.type == ALLEGRO_EVENT_TIMER) {
			//if the up button is pressed AND we're still below the top wall,
			//move the box "up" by 4 pixels

			if (keyr[0] && rpaddle_x >= 0) {
				rpaddle_x -= 4.0;
			}
			if (keyr[1] && rpaddle_x <= 640 - 32) {
				rpaddle_x += 4.0;
			}

			//left paddle
			//if the up button is pressed AND we're still below the top wall,
			//move the box "up" by 4 pixels
			//if (keyl[0] && lpaddle_y >= 0) {
			//lpaddle_y -= 4.0;
			//}

			//if the down button is pressed AND we're still above the bottom wall

			//move the box "down" by 4 pixels
			//if (keyl[1] && lpaddle_y <= 480 - 32) {
			//	lpaddle_y += 4.0;
			//}

			//if the box hits the left wall OR the right wall
			if (ball_x < 0) {
				ball_dx = -ball_dx;
				rscore++;
			}
			else if (ball_x > 640 - 32) {
				//flip the x direction
				ball_dx = -ball_dx;

			}

			//if the box hits the top wall OR the bottom wall
			if (ball_y < 0 || ball_y > 480 - 32) {
				//flip the y direction
				ball_dy = -ball_dy;
			}

			//check collision with left paddle
			//cout << ball_x << " " << ball_y << " " << lpaddle_x << " " << lpaddle_y << endl;

			//add sound effect

			//add to score

			//check with  paddle

			if (collision(ball_x, ball_y, rpaddle_x, rpaddle_y) == 1) {
				ball_dy = -ball_dy;

				al_play_sample_instance(instance2);
			}

			//ball/brick collisions!
			if (Brick1.Collision(ball_x, ball_y) == true) {
				ball_dy = -ball_dy;
				Brick1.killBrick();
				//wacky sound effect
				//up the score

			}


			//really important code!
			//move the box in a diagonal

			ball_x += ball_dx;
			ball_y += ball_dy;

			//if an event happened, you better redraw
			redraw = true;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		//here's the algorithm that turns key presses into events
		//a "key down" event is when a key is pushed
		//while a "key up" event is when a key is released

		//has something been pressed on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {

			//"keycode" holds all the different keys on the keyboard
			switch (ev.keyboard.keycode) {

				//if the up key has been pressed
			case ALLEGRO_KEY_LEFT:
				keyr[0] = true;
				break;

			case ALLEGRO_KEY_RIGHT:
				keyr[1] = true;
				break;
				//if the up key has been pressed
			}
		}
		//if the down key has been pressed
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {

			case ALLEGRO_KEY_LEFT:
				keyr[0] = false;
				break;

				//if the right key has been pressed
			case ALLEGRO_KEY_RIGHT:
				keyr[1] = false;

				break;
			}
		}
		//RENDER SECTION
		//if the clock ticked but no other events happened, don't bother redrawing
		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;
			//paint black over the old screen, so the old square dissapears
			al_clear_to_color(al_map_rgb(0, 0, 0));
			//the algorithm above just changes the x and y coordinates
			//here's where the bitmap is actually drawn somewhere else
			al_draw_bitmap(rpaddle, rpaddle_x, rpaddle_y, 0);
			al_draw_bitmap(ball, ball_x, ball_y, 0);
			al_draw_textf(font, ALLEGRO_COLOR(al_map_rgb(255, 255, 255)), 320, 40, 1, "score: %d ", rscore);

			//draw bricks

			if(Brick1.isDead()==false)//add this for each brick
				Brick1.drawBrick();
			if (Brick2.isDead() == false)
			Brick2.drawBrick();
			if (Brick3.isDead() == false)
			Brick3.drawBrick();
			if (Brick4.isDead() == false)
			Brick4.drawBrick();
			if (Brick5.isDead() == false)
			Brick5.drawBrick();
			if (Brick6.isDead() == false)
			Brick6.drawBrick();
			if (Brick7.isDead() == false)
			Brick7.drawBrick();
			if (Brick8.isDead() == false)
			Brick8.drawBrick();
			if (Brick9.isDead() == false)
			Brick9.drawBrick();
			if (Brick10.isDead() == false)
			Brick10.drawBrick();
			if (Brick11.isDead() == false)
				Brick11.drawBrick();
			if (Brick12.isDead() == false)
				Brick12.drawBrick();
			if (Brick13.isDead() == false)
				Brick13.drawBrick();
			if (Brick14.isDead() == false)
				Brick14.drawBrick();
			if (Brick15.isDead() == false)
				Brick15.drawBrick();
			if (Brick16.isDead() == false)
				Brick16.drawBrick();
			if (Brick17.isDead() == false)
				Brick17.drawBrick();
			if (Brick18.isDead() == false)
				Brick18.drawBrick();
			if (Brick19.isDead() == false)
				Brick19.drawBrick();
			if (Brick20.isDead() == false)
				Brick20.drawBrick();
			if (Brick21.isDead() == false)
				Brick21.drawBrick();
			if (Brick22.isDead() == false)
				Brick22.drawBrick();
			if (Brick23.isDead() == false)
				Brick23.drawBrick();
			if (Brick24.isDead() == false)
				Brick24.drawBrick();
			if (Brick25.isDead() == false)
				Brick25.drawBrick();
			if (Brick26.isDead() == false)
				Brick26.drawBrick();
			if (Brick27.isDead() == false)
				Brick27.drawBrick();
			if (Brick28.isDead() == false)
				Brick28.drawBrick();
			if (Brick29.isDead() == false)
				Brick29.drawBrick();
			if (Brick30.isDead() == false)
				Brick30.drawBrick();
			if (Brick31.isDead() == false)
				Brick31.drawBrick();
			if (Brick32.isDead() == false)
				Brick32.drawBrick();
			if (Brick33.isDead() == false)
				Brick33.drawBrick();
			if (Brick34.isDead() == false)
				Brick34.drawBrick();
			if (Brick35.isDead() == false)
				Brick35.drawBrick();
			if (Brick36.isDead() == false)
				Brick36.drawBrick();
			if (Brick37.isDead() == false)
				Brick37.drawBrick();
			if (Brick38.isDead() == false)
				Brick38.drawBrick();
			if (Brick39.isDead() == false)
				Brick39.drawBrick();
			if (Brick40.isDead() == false)
				Brick40.drawBrick();
			

			al_flip_display();//all drawing needs to happen before this!


		}//end render section



	}//end of while loop (game loop)

	//al_destroy stuff goes here!!



}//end of main



bool collision(int b1_x, int b1_y, int b2_x, int b2_y) {
	if ((b1_x + 25 < b2_x) || //ball is to the left of the paddle
		(b1_x > b2_x + 200) || //ball is to the right of the paddle
		(b1_y > b2_y + 200) ||  //ball is below paddle
		(b1_y + 25 < b2_y))	//ball is above paddle
		return 0;//no collision
	else
		cout << "collision!";
	return 1;//collision!
}

bool Brick::Collision(int ball_x, int ball_y) {
	if ((ball_x + 25 < xPos) || //ball is to the left of the brick
		(ball_x > xPos + 200) || //ball is to the right of the paddle
		(ball_y > yPos + 200) ||  //ball is below paddle
		(ball_y + 25 < yPos))	//ball is above paddle
		return 0;//no collision
	else
		cout << "collision!";
	return 1;//collision!
}

void Brick::set_value(int x, int y, int w, int h) {
	xPos = x;
	yPos = y; 
	width = w;
	height = h;
	dead = false;
}

void Brick::drawBrick() {
	al_draw_filled_rectangle(xPos, yPos, xPos + width, yPos + height, al_map_rgb (255, 255, 255));
	
}

void Brick::killBrick() {
	dead = true;
}

bool Brick::isDead() {
	return dead;
} //returns the value of dead
